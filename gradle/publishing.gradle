import java.text.SimpleDateFormat

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

def projectArtifactId = 'assertj-swagger'

jar {
    manifest {
        attributes(
                'Built-By': 'Vijay Vepakomma',
                'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Specification-Title': projectArtifactId,
                'Specification-Version': project.version,
                'Implementation-Title': projectArtifactId,
                'Implementation-Version': project.version
        )
    }
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('gpgPassphrase')) ext.gpgPassphrase = ''
if (!project.hasProperty('ossUser')) ext.ossUser = ''
if (!project.hasProperty('ossPassword')) ext.ossPassword = ''

def gitHubUserName = project.hasProperty("githubUserName") ? project.githubUserName: System.getenv("GITHUB_USERNAME")
def gitHubToken =  project.hasProperty("githubToken") ? project.githubToken: System.getenv("GITHUB_TOKEN")

def mavenCentralUserName = project.hasProperty("mavenCentralUserName") ? project.mavenCentralUserName: System.getenv("MAVEN_CENTRAL_USERNAME")
def mavenCentralPassword =  project.hasProperty("mavenCentralPassword") ? project.mavenCentralPassword: System.getenv("MAVEN_CENTRAL_PASSWORD")

println "##### mavenCentralUserName: $mavenCentralUserName"
println "##### mavenCentralPassword: $mavenCentralPassword"


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/vijayvepa/assertj-swagger")
            credentials {
                username = gitHubUserName
                password = gitHubToken
            }
        }
        maven{
            name = "MavenCentral"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials  {
                username = mavenCentralUserName
                password = mavenCentralPassword
            }
        }

        maven{
            name = "MavenCentralSnapshot"
            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            credentials  {
                username = mavenCentralUserName
                password = mavenCentralPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom.withXml {
                def devs = ['RobWin': 'Robert Winkler', 'vijayvepa': 'Vijay Vepakomma']
                def root = asNode()

                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }

                root.appendNode('name', 'assertj-swagger')
                root.appendNode('packaging', 'jar')
                root.appendNode('url', 'https://github.com/vijayvepa/assertj-swagger')
                root.appendNode('description', 'Verification library for contract adherence and backward compatibility')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Apache-2.0')
                license.appendNode('url', 'https://github.com/vijayvepa/assertj-swagger/blob/master/LICENSE.txt')
                license.appendNode('distribution', 'repo')

                root.appendNode('scm').appendNode('url', 'https://github.com/vijayvepa/assertj-swagger.git')

                def developers = root.appendNode('developers')
                devs.each {
                    def d = developers.appendNode('developer')
                    d.appendNode('id', it.key)
                    d.appendNode('name', it.value)
                }
            }
        }
    }
}

